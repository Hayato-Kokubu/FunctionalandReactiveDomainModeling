Designing functional domain models

・ドメインモデルのデザインには函数的、代数的方法がある
・ドメインの代数と実装を分離する
・APIでの代数的法則を実施する
・ドメインおbじぇくとのライフサイクルを実装する


Summary から読むかな

・moduleが定義する代数の言葉で考える !=  OO system
・Type-driven composition
・Separation of concerns 関心の分離
  the interpreter from the algebra // interpreter という言葉が出てくる
・Aggregate as the unit of consistency: 集約の存在境界？を代数的法則で実現
・Functional implementation of domain object patterns
  lense, reader monad, the smart constructor

three basic lifecycle
- aggregates // serviceとして使われる時
- factories  // 生成
- repositories // 永続化

これらが、FPの基本的なイデオムからどう作られるかをみる

3.1 The algebra of API design
• Algebraic API design
• How it differs from OO design

3.2 Defining the algebra of a domain service
• Designing a specific algebra
• Composing algebras
• Laws of algebra

3.3 Lifecycle patterns of domain objects
• Factories
• Aggregates
• Repositories // この辺でやりたいことをやるっぽい
• FP abstractions (lenses, monads) // ！！
• Dependency injection in FP // ！！！


3.1 The algebra of API design
OOでは、interface => 個々のクラス という作り方

FP では、operations (ドメインの振る舞い ) を先に作り、後から一般化して moduleにする

module とは？ 関数の集合で、ドメインルールとして不変量を与える
=> これを代数という


3.1.1 Why an algebraic approach


APIはユーザに向いていないといけない。
user がdomainについて初めてしるのは、振る舞いの集合である


ユーザが、APIを組み合わせられること

algebraic approach の利点

Loud and clear

Compositionality

Verifiability


algebra : 型, 関数, 法則の集まり

implementation はlifecycle の後にくる。


3.2 Defining an algebra for a domain service

 // a domain service ってなんだっけ？ ついになるのは app service?

 口座を作成する
 // def open(no: String, name: String, openDate: Option[Date]): ???
    返す型は？
    普通は Account
    失敗する処理の場合などは、
    Option  => 失敗したら none
    Either  => 失敗したら情報が残る
    Try     =>

値そのものと、abstraction over the evaluation について

3.2.1 Abstracting over evaluation

values of computation that has been evaluated
=> 値を組み合わせる際に使う

一連の処理を行う場合に、
成功・失敗にかかわらず何かしらの値を返して欲しい
=> for-comprehensions を使う


chapter 4 covers monads in detail. // わーい

computations is effectful => 何かしらの文脈に包まれていること
monad は、effectful computations のための1つの方法である

値そのままを返してしまうと、結合できなくなる。 // あえて包まないといけなくなる
// ただしそのために含めると、他で使いづらくならない？



3.2.2 でのopen メソッドで、
Account そのままを返すよりも、Option, Try などで返した方がいい！
なぜなら(モナドのような)一連の処理で繋げられないからだ。
という話について


3.2.3 The final algebra of types

open
close   // for closing an account
debit   // debiting money from an account
credit  // for crediting money into an account
balance // which returns the current balance for the account



for式: 業務上での完全な実装となっている  // algebra と business operation が対応しているため


3.2.4 Laws of the algebra

by using such
invariants and encoding them as verifiable properties, you can not only document
domain-model constraints but also execute them every time you build your system